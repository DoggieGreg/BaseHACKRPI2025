name: Build NextJS Site

on:
  push:
    branches: ["main"]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: ["main", "develop"]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  # Allow manual trigger from the Actions tab
  workflow_dispatch:

# Set minimal permissions (security best practice)
permissions: {}
    
# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# Improved to cancel in-progress PR builds but preserve main builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # Detect file changes to optimize what jobs run
  changes:
    runs-on: ubuntu-latest
    # Grant permissions to create check runs (needed for action outputs)
    permissions:
      checks: read
      contents: read
      pull-requests: read
    outputs:
      code: ${{ steps.filter.outputs.code }}
      styles: ${{ steps.filter.outputs.styles }}
      e2e: ${{ steps.filter.outputs.e2e }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - '**/*.{js,jsx,ts,tsx}'
              - 'package.json'
              - 'package-lock.json'
              - 'yarn.lock'
            styles:
              - '**/*.{css,scss}'
              - 'tailwind.config.{js,ts}'
            e2e:
              - 'e2e/**/*.{js,ts}'
              - 'playwright.config.{js,ts}'

  # Lint and format job
  lint:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' || github.event_name == 'pull_request' }}
    # Grant specific permissions needed for lint job
    permissions:
      checks: write
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Make sure the actual branch is checked out when running on pull requests
          ref: ${{ github.head_ref }}
          # Full git history is needed for proper linting
          fetch-depth: 0
      
      - name: Prettify code
        uses: creyD/prettier_action@v4.3
        with:
          prettier_options: --write --tab-width=2 --use-tabs .
          # Ensure Prettier config is respected or created if missing
          prettier_plugins: prettier-plugin-tailwindcss
          github_token: ${{ secrets.GITHUB_TOKEN }}
          commit_message: "ðŸ§¹ Automated code formatting"
      
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      
      # Optimized caching strategy
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-modules-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ steps.detect-package-manager.outputs.manager }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-v2
      
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      
      - name: Install additional dependencies for linting
        run: |
          ${{ steps.detect-package-manager.outputs.manager }} add --save-dev eslint-plugin-prettier prettier-plugin-tailwindcss
      
      # Enhanced linting strategy - auto-fix but don't fail on warnings
      - name: Run ESLint with auto-fix
        id: eslint-fix
        continue-on-error: true
        run: |
          echo "Running ESLint with auto-fix..."
          ${{ steps.detect-package-manager.outputs.runner }} next lint --fix
      
      # Check for errors, but allow warnings
      - name: Check for ESLint errors
        run: |
          echo "Checking for ESLint errors (allowing warnings)..."
          ${{ steps.detect-package-manager.outputs.runner }} next lint --quiet || {
            echo "::error::ESLint found errors that must be fixed. Please review the errors above.";
            exit 1;
          }
      
      # Report warnings but don't fail the build
      - name: Report ESLint warnings
        run: |
          echo "Checking for ESLint warnings (won't fail build)..."
          ${{ steps.detect-package-manager.outputs.runner }} next lint || echo "::warning::ESLint found warnings, but continuing build. Please consider fixing these warnings when possible."

  # Build job - preserved your logic with optimizations
  build:
    runs-on: ubuntu-latest
    needs: [lint]
    timeout-minutes: 15
    # Grant specific permissions needed for build job
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      
      # Reusing improved caching from above
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-modules-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ steps.detect-package-manager.outputs.manager }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-v2
      
      - name: Restore Next.js build cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }} --no-audit --force
      
      # Preserved from original workflow
      - name: Add Amplify outputs file
        run: touch amplify_outputs.json
      
      - name: Populate Amplify outputs file
        run: echo "{}" > amplify_outputs.json
      
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        env:
          NODE_OPTIONS: --max-old-space-size=4096 --no-deprecation

      # Debug step to verify .next directory exists and contains files
      - name: Check .next directory
        run: |
          echo "Contents of workspace:"
          ls -la
          echo ".next directory exists:"
          ls -la .next || echo ".next directory not found!"
      
      # Fixed upload artifact step with proper settings
      - name: Upload build output
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next
          retention-days: 1
          if-no-files-found: error # Will make the workflow fail if no files found

  # Test job
  test:
    runs-on: ubuntu-latest
    needs: [changes]
    if: ${{ needs.changes.outputs.code == 'true' || github.event_name == 'pull_request' }}
    # Grant specific permissions needed for test job
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-modules-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ steps.detect-package-manager.outputs.manager }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-v2
      
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }} --no-audit --force
      
      # Added Amplify file creation steps
      - name: Add Amplify outputs file
        run: touch amplify_outputs.json
      
      - name: Populate Amplify outputs file
        run: echo "{}" > amplify_outputs.json
      
      - name: Run tests
        run: ${{ steps.detect-package-manager.outputs.manager }} test

  # E2E testing with Playwright (simplified to make it more reliable)
  e2e-tests:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest
    needs: [changes]
    if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.e2e == 'true' || github.event_name == 'pull_request' }}
    timeout-minutes: 15
    permissions:
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone for speed
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
      
      - name: Get Playwright version
        id: playwright-version
        run: |
          if [ -f "package.json" ]; then
            VERSION=$(node -e "try { console.log(require('./package.json').devDependencies['@playwright/test'] || 'latest') } catch { console.log('latest') }")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
          fi
      
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-modules-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}-v1
      
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci
      
      # Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-browsers-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
      
      # Conditionally install browsers or just dependencies
      - name: Install Playwright browsers
        if: steps.playwright-browsers-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium
      
      - name: Install Playwright dependencies
        if: steps.playwright-browsers-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps chromium
      
      # Add Amplify outputs file (needed for build)
      - name: Add Amplify outputs file
        run: touch amplify_outputs.json && echo "{}" > amplify_outputs.json
      
      # Build within the E2E job instead of depending on separate build job
      - name: Build Next.js for E2E tests
        run: npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=4096 --no-deprecation
      
      # Run a simple single-shard test to ensure everything works
      - name: Run Playwright tests
        run: npx playwright test
        env:
          # Pass environment variables if needed
          CI: true
      
      # Always upload artifacts for debugging
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # You can re-enable the sharded workflow once the basic setup is working
  # just uncomment and modify as needed
  
  # Sharded tests for when your E2E setup is fully working
  # e2e-tests-sharded:
  #   name: E2E Tests (Shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }})
  #   runs-on: ubuntu-latest
  #   needs: [changes, e2e-tests]
  #   if: ${{ false }}  # Disabled until main E2E tests are passing
  #   timeout-minutes: 10
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       shardIndex: [1, 2, 3]
  #       shardTotal: [3]
  #   steps:
  #     # Steps similar to e2e-tests job but with --shard parameter
  #     # ...
